{"version":3,"sources":["image.js","App.js","serviceWorker.js","index.js","assets/img01.jfif","assets/img02.jfif","assets/img03.jfif","assets/img04.jfif","assets/img05.jfif","assets/img06.jfif","assets/img07.jfif"],"names":["img01","img02","img03","img04","img05","img06","img07","App","props","afterChange","index","songControl","play","state","Audio","pause","setState","data","songUrl","songIndex","this","addEventListener","prev","length","className","onClick","ref","src","autoPlay","swipeSpeed","vertical","dots","easing","easeInQuad","imgs","map","val","alt","key","style","width","height","verticalAlign","onLoad","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"kWAQe,GAACA,IAAOC,IAAOC,IAAOC,IAAOC,IAAOC,IAAOC,KC2E3CC,G,yDA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA8BRC,YAAc,SAACC,KA/BI,EAmCnBC,YAAc,WAAO,IACXC,EAAS,EAAKC,MAAdD,KACJA,EACF,EAAKE,MAAMC,QAEX,EAAKD,MAAMF,OAGb,EAAKI,SAAS,CACZJ,MAAOA,KA1CT,EAAKC,MAAQ,CACXI,KAAM,CAAC,uBAAwB,uBAAwB,wBACvDL,MAAM,EACNM,QAAS,CACP,sIACA,sIACA,uIAEFC,UAAW,GAVI,E,gEAcE,IAAD,OAMlBC,KAAKN,MAAMO,iBACT,SACA,WACE,EAAKL,UAAS,SAACM,GAAD,MAAW,CACvBH,UAAWG,EAAKH,YAAcG,EAAKJ,QAAQK,OAAS,EAAID,EAAKH,UAAY,SAG7E,K,+BAqBM,IAAD,SAC8BC,KAAKP,MAAlCK,EADD,EACCA,QAASN,EADV,EACUA,KAAMO,EADhB,EACgBA,UACvB,OACE,yBAAKK,UAAU,QACb,yBAAKA,UAAS,gBAAWZ,EAAO,OAAS,IAAMa,QAASL,KAAKT,aAC3D,uBAAGa,UAAU,0BACb,2BAAOE,IAAK,SAACA,GAAD,OAAU,EAAKZ,MAAQY,GAAMC,IAAKT,EAAQC,GAAYS,UAAQ,KAE5E,uBAAUJ,UAAU,iBAAiBK,WAAY,EAAGC,UAAQ,EAACC,MAAM,EAAOC,OAAQC,aAAYxB,YAAaW,KAAKX,aAC7GyB,EAAKC,KAAI,SAACC,EAAK1B,GAAN,OACR,yBACEiB,IAAKS,EACLC,IAAI,GACJC,IAAK5B,EACL6B,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,cAAe,OACvDC,OAAQ,wB,GAhEJC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.273e1fa1.chunk.js","sourcesContent":["import img01 from './assets/img01.jfif';\r\nimport img02 from './assets/img02.jfif';\r\nimport img03 from './assets/img03.jfif';\r\nimport img04 from './assets/img04.jfif';\r\nimport img05 from './assets/img05.jfif';\r\nimport img06 from './assets/img06.jfif';\r\nimport img07 from './assets/img07.jfif';\r\n\r\nexport default [img01, img02, img03, img04, img05, img06, img07];\r\n","import React, { Component } from 'react';\nimport { Carousel, WingBlank } from 'antd-mobile';\nimport { easeInQuad } from 'tween-functions';\nimport imgs from './image';\nimport './App.less';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: ['AiyWuByWklrrUDlFignR', 'TekJlZRVCjLFexlOCuWn', 'IJOtIlfsYdTyaDTRVrLI'],\n      play: true,\n      songUrl: [\n        'https://m8.music.126.net/20200707161445/79f53558e5f2dce2cf23c902c21ccd1e/ymusic/5847/20c3/6894/8443e9f00b796c046e122520976835ad.mp3',\n        'https://m7.music.126.net/20200707145805/1310e12098e5ea81cd31347284cf3cb3/ymusic/0452/5652/030f/38cbdaa2e4a83be9137c4ee26fa08d3e.mp3',\n        'https://m7.music.126.net/20200707151038/1cc7bc7eb607456c4437a602635c8b94/ymusic/7388/4959/15fe/c527fa6d0aee9373b53566ea76b6fa3e.mp3',\n      ],\n      songIndex: 0,\n    };\n  }\n\n  componentDidMount() {\n    // setTimeout(() => {\n    //   this.setState({\n    //     data: ['AiyWuByWklrrUDlFignR', 'TekJlZRVCjLFexlOCuWn', 'IJOtIlfsYdTyaDTRVrLI'],\n    //   });\n    // }, 100);\n    this.Audio.addEventListener(\n      'ended',\n      () => {\n        this.setState((prev) => ({\n          songIndex: prev.songIndex === prev.songUrl.length ? 0 : prev.songIndex + 1,\n        }));\n      },\n      false,\n    );\n  }\n\n  afterChange = (index) => {\n    // console.log(index)\n  };\n\n  songControl = () => {\n    const { play } = this.state;\n    if (play) {\n      this.Audio.pause();\n    } else {\n      this.Audio.play();\n    }\n\n    this.setState({\n      play: !play,\n    });\n  };\n\n  render() {\n    const { songUrl, play, songIndex } = this.state;\n    return (\n      <div className=\"root\">\n        <div className={`music ${play ? 'play' : ''}`} onClick={this.songControl}>\n          <i className=\"iconfont icon-xintiao\"></i>\n          <audio ref={(ref) => (this.Audio = ref)} src={songUrl[songIndex]} autoPlay />\n        </div>\n        <Carousel className=\"space-carousel\" swipeSpeed={8} vertical dots={false} easing={easeInQuad} afterChange={this.afterChange}>\n          {imgs.map((val, index) => (\n            <img\n              src={val}\n              alt=\"\"\n              key={index}\n              style={{ width: '100%', height: '100%', verticalAlign: 'top' }}\n              onLoad={() => {\n                // fire window resize event to change height\n                // window.dispatchEvent(new Event('resize'));\n                // this.setState({ imgHeight: 'auto' });\n              }}\n            />\n          ))}\n        </Carousel>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/img01.bff93032.jfif\";","module.exports = __webpack_public_path__ + \"static/media/img02.e7f91254.jfif\";","module.exports = __webpack_public_path__ + \"static/media/img03.b4df27e9.jfif\";","module.exports = __webpack_public_path__ + \"static/media/img04.109f0e51.jfif\";","module.exports = __webpack_public_path__ + \"static/media/img05.a8413f70.jfif\";","module.exports = __webpack_public_path__ + \"static/media/img06.8ca9becd.jfif\";","module.exports = __webpack_public_path__ + \"static/media/img07.a1306f8b.jfif\";"],"sourceRoot":""}